问：你在编程时遇到最大的困难是什么?
遇到解决不了问题时，你可以：
1、分治、通过输出的信息快速缩小问题的范围
2、了解原理，分析问题的所在
3、多打印信息，替换法尝试
4、搜索，可能别人已经遇到了
5、问人，自己搞不定可以快速问人，别人可能会教你很多
本质上也就是一个猜想->定位->放大猜想->定位(分析现象、生成猜疑目标、排除猜疑目标) 这样一个循环迭代的过程。

词法分析（Lexical analysis或Scanning）和词法分析程序（Lexical analyzer或Scanner）
- 词法分析阶段是编译过程的第一个阶段。这个阶段的任务是从左到右一个字符一个字符地读入源程序，
  即对构成源程序的字符流进行扫描然后根据构词规则识别单词(也称单词符号或符号)。
语法分析（Syntax analysis或Parsing）和语法分析程序（Parser）
- 语法分析的任务是在词法分析的基础上将单词序列组合成各类语法短语，如“程序”，“语句”，“表达式”等等.语法分析程序判断源程序在结构上是否正确。
语义分析（Syntax analysis）
- 语义分析的任务是对结构上正确的源程序进行上下文有关性质的审查, 进行类型审查.例如一个C程序片断:
   int arr[2],b;
   b = arr * 10;
　 源程序的结构是正确的.
　 语义分析将审查类型并报告错误:不能在表达式中使用一个数组变量,赋值语句的右端和左端的类型不匹配.
中间语言生成：
- 这一步会生成平台无关的三地址码，比如2 + 3会写成t1 = 2 + 3，同时也会把这样在编译期就可以确定的表达式进行优化
目标代码生成：
- 编译器根据三地址码生成依赖于目标机器的目标机器代码，也就是汇编语言。
- 最后.i文件经过编译，得到汇编文件，后缀是.s

问：gcc编译流程？
gcc将hello.c源文件编译成可执行的binary文件需要经过hello.i、hello.s、hello.o、hello四个步骤，
1.预处理：展开头文件和宏定义等。
gcc -E hello.c -o hello.i
2.编译：将预处理得到的源代码转换成汇编文件（得到汇编文件）。
gcc -S hello.i -o hello.s
3.汇编：将汇编代码转成不可执行的机器码文件（得到机器码文件）。
gcc -c hello.s -o hello.o
4.链接：将不可执行的机器码文件转成可执行的文件，把各种符号引用和符号定义转换成为可执行文件中的合适信息，通常是虚拟地址（得到可执行文件）。
gcc hello.o -o hello
- 源码从前端经过词法分析、语法分析/语义分析之后生成AST(抽象语法树)/GENERIC（可通过gcc hello.c -fdump-tree-original-raw查看AST表示），
- 再转换成GIMPLE中间表示，GCC还需要对GIMPLE进行低级化、IPA处理等，再转成SSA(SSA: 静态单赋值表示)优化后生成RTL，最终才生成汇编代码
 （中间过程可通过gcc hello.c -fdump-tree-all查看）
补充：
在编译过程中，GCC使用了三种主要的中间语言来表示程序：GENERIC，GIMPLE和RTL。
GENERIC是一种由每个前端生成的语言无关的表示。它用来作为解析器和优化器之间的接口。GENERIC是一种通用表示，能够表示GCC支持的所有语言程序。
GIMPLE用于目标和语言无关的优化（例如，内联，常数传播，尾调用消除，冗余消除等）。

问：链接可分为动态链接和静态链接？
gcc 默认是动态链接，加上-static 参数则采用静态链接。 
gcc编译系统主要由三部分组成：与语言相关的前端、与语言无关的后端、与机器相关的机器描述。
动态链接：
- 把调用的函数所在文件模块和调用函数在文件中的位置等信息链接进目标程序，程序运行的时候再从DLL中寻找相应函数代码。
  多个程序可以共享同一段代码。由于是运行时加载，可能会影响程序的前期执行性能。
- 动态链接使用动态链接库进行链接，生成的程序在执行的时候需要加载所需的动态库才能运行。动态链接生成的程序小巧，但是必须依赖动态库，否则无法执行。
  Linux 下的动态链接库实际是共享目标文件（shared object），一般是.so 文件。
- g++ -o libtest.so -rdynamic -shared -fPIC -ldl
静态连接库：
- 把文件中用到的函数代码直接链接进目标程序，程序运行的时候不再需要其它的库文件。程序体积会变大。
  若静态库有更新的话，所有可执行文件都得重新链接才能用上新的静态库。
- Linux 下静态库是汇编产生的.o 文件的集合，一般以.a 文件形式出现。

问：关于符号解析与重定位？
符号解析:解析符号就是将每个符号引用与它输入的可重定位目标文件中的符号表中的一个确定的符号定义联系起来。若找不到，则出现编译时错误。
重定位：根据目标文件的重定位入口所修正的指令寻址方式，进行正确的寻址。

问：GCC的优化流程主要是？
- 编译器首先从编译命令行中解析出优化参数，经过语法分析器将源程序翻译成等价的AST(抽象语法树)形式； 
- 再由中间代码生成器将AST转换为RTL(Register transfer language)；然后由优化器根据解析出的优化参数实施相应的优化策略；
- 最后由代码生成器读入优化后的RTL并生成可执行机器码予以输出。事实上，GCC的优化绝大部分都是在RTL这个层次上实施的。

编译器分为前端和后端
GCC编译的前端将不同的高级编程语言经过词法分析、语法分析转化为与前端语言无关的统一的中间表示。这就是GCC处理器支持多种编程语言的根本原因。
后端负责将RTL表示的中间形式进行优化并最终生成对应平台的汇编代码。GCC后端是在RTL的中间形式上进行的，在RTL上做大量的优化，包括机器有关的优化和机器无关的优化。
在RTL层做很多遍优化（pass），最后对于每条RTL通过模板匹配（Pattern Match）调用对应的汇编模板生成汇编代码。

问：说说传统编译器的工作原理？
基本上都是三段式的，可以分为前端、优化器和后端。
前端负责解析源代码，检查语法错误，并将其翻译为抽象的语法树；
优化器对这一中间代码进行优化，试图使代码更高效；
后端则负责将优化器优化后的中间代码转换为目标机器的代码，这一过程后端会最大化的利用目标机器的特殊指令，以提高代码的性能。

广义的 LLVM 指的是一个完整的 LLVM 编译器框架系统，包括了前端、优化器、后端、众多的库函数以及很多的模块；
而狭义的 LLVM 则是聚焦于编译器后端功能的一系列模块和库，包括代码优化、代码生成、JIT 等。

问：简述 LLVM 与 Clang 及其关系？
Clang 是一个 C、C++、Objective-C 和 Objective-C++ 编程语言的编译器前端，采用底层虚拟机（LLVM）作为后端。
Clang 是一个高度模块化开发的轻量级编译器，编译速度快、占用内存小、有着友好的出错提示。
整体的编译器架构就是 LLVM 架构；Clang 大致可以对应到编译器的前端，主要处理一些和具体机器无关的针对语言相关的分析操作；



