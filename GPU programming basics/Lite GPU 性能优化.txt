Lite GPU 性能优化
一、OpenCL layout
 --------------------------------通用类型1
CLImageConverterDefault
  size_t width = W * ((C + 3) / 4);
  size_t height = H * N;
 --------------------------------通用类型2，conv5x5
CLImageConverterFolder
        2维：width = (tdim[1] + 3) / 4; height = tdim[0];
        1维：先填充为 (w, 1)， 再应用于二维

CLImageConverterNormal ----------box coder
CLImageConverterDWBlock   -----暂时无用
CLImageConverterDWFilter    -----暂时无用
 --------------------------------conv common
CLImageConverterNBlock.
size_t width = ((C + 3) / 4) * 4;
size_t height = ((N + 3) / 4) * H * W;
 --------------------------------conv wino
CLImageConverterWinoTransWeight （only 2维）
size_t width = ((C + 3) / 4) * 4;
size_t height = ((N + 3) / 4) * 16;   // N * (wino_blk_size + 2) * (wino_blk_size + 2)
 --------------------------------mali conv1x1 
CLImageConverterNBlock.
size_t width = ((C + 3) / 4) * 4;
size_t height = ((N + 3) / 4) * H * W;
CLImageConverterN2Block
 --------------------------------
depth_conv2d, conv1x1, conv3x3
CLImageConverterNWBlock
  size_t width = W * ((N + 3) / 4);
  size_t height = C * H;
 --------------------------------conv mul group 
CLImageConverterNBlockGroup（多group conv） 


OpenCL conv1x1优化
mali平台conv1x1
compute_units = CL_DEVICE_MAX_COMPUTE_UNITS

auto task_size = output_tensor_h_ * output_tensor_w_ * output_tensor_c_;
single_cu_task_size = task_size / compute_units;

  if (device_name.find("Mali-G76") == std::string::npos) {

    threshold_2 = 256.0f * 16.0f;

  } else {

    threshold_2 = 256.0f * 6.0f;

    threshold_4 = 256.0f * 16.0f;

  }

根据单个计算单元的task_size 和阈值来确定kernel

特点：输入image, filter和bias为buffer

kernel: conv2d_1x1_mali_h1w2c1

kernel: conv2d_1x1_mali_h1w2c2

kernel: conv2d_1x1_mali_h2w2c2

其他平台conv1x1
conv1x1优化

通用kernel: conv2d_1x1_opt

数据类型：全部image2d_t(input, filter, bias, output)

全局工作项三维：(c+3) / 4;  (w+3) / 4;  n * h

输入数据layout：nhwc4

filter 的layout：CLImageConverterNWBlock（width = W * ((N + 3) / 4);    height = C * H;）

单个工作项kernel内循环次数->input_c_block：c4的个数

实现思路：每个工作项计算输出的16个值（c4 * w4）

if input_c % 4 == 0 从以下kernel中选择

conv2d_1x1_h1w4c1

conv2d_1x1_h1w5c1

conv2d_1x1_h1w7c1

conv2d_1x1_h2w2c1

conv2d_1x1_h2w2c2

conv2d_1x1_h2w3c2

二、buffer方案竞品支持情况：mnn是全部OP支持buffer和image2d两种实现，其余框架部分算子支持buffer
目前全图image2d方案遗留问题：
（1）初始化耗时长的问题
（2）conv2d(1x1, 3x3, 5x5, 7x7)和depthwise_conv2d 代码混杂在一起，结构不清.
